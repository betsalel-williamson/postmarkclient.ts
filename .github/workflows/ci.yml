name: CI/CD Pipeline

on: [push, pull_request]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install dependencies and build
      run: |
        npm ci
        npm run build

    - name: Run tests and generate coverage reports
      # The coverage reporters configured in vitest.config.ts will generate:
      # - coverage/coverage-summary.json for total percentage
      # - coverage/text-report.md for the detailed markdown table
      # - coverage/html/ for the full interactive HTML report
      run: npm test -- --coverage
      continue-on-error: true # Ensure subsequent steps run even if tests fail

    - name: Upload HTML coverage report artifact
      uses: actions/upload-artifact@v4
      id: upload_html_coverage
      with:
        name: coverage-report-html
        path: coverage # Path to the directory containing the HTML report files

    - name: Report Test Results (JUnit)
      if: success() || failure()
      uses: dorny/test-reporter@v2
      with:
        name: Template Engine Test Results
        path: junit.xml
        reporter: "jest-junit"
        fail-on-error: true # Fail the CI if tests fail

    - name: Generate Code Coverage Summary for GitHub
      if: always() # Always run this step to provide summary regardless of test outcome
      run: |
        # Install jq for JSON parsing
        sudo apt-get update && sudo apt-get install -y jq

        # Define paths to coverage report files
        COVERAGE_JSON_FILE="coverage/coverage-summary.json"
        COVERAGE_TEXT_FILE="coverage/text-report.md" # This will contain the Markdown table

        TOTAL_COVERAGE_PERCENT="N/A"
        COLOR="lightgrey"
        COVERAGE_BADGE_TEXT="no%20report" # Default URL-encoded text for badge

        # Try to extract total coverage percentage from JSON summary
        if [ -f "$COVERAGE_JSON_FILE" ]; then
          TOTAL_COVERAGE_PERCENT=$(jq -r '.total.statements.pct' "$COVERAGE_JSON_FILE")

          # Validate if it's a number and determine badge color
          if [[ "$TOTAL_COVERAGE_PERCENT" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
            TOTAL_COVERAGE_INT=${TOTAL_COVERAGE_PERCENT%.*} # Remove decimal for integer comparison

            if [ "$TOTAL_COVERAGE_INT" -ge 90 ]; then
              COLOR="brightgreen"
            elif [ "$TOTAL_COVERAGE_INT" -ge 75 ]; then
              COLOR="yellow"
            elif [ "$TOTAL_COVERAGE_INT" -ge 50 ]; then
              COLOR="orange"
            else
              COLOR="red"
            fi
            COVERAGE_BADGE_TEXT="${TOTAL_COVERAGE_PERCENT}%25" # URL encode % for badge
          fi
        fi

        # Construct the coverage badge URL
        BADGE_URL="https://img.shields.io/badge/coverage-${COVERAGE_BADGE_TEXT}-${COLOR}"
        BADGE_MARKDOWN="![Coverage]($BADGE_URL)"

        # Get the artifact ID from the previous upload step's output
        # This ID is specific to the uploaded artifact for the current run
        ARTIFACT_ID="${{ steps.upload_html_coverage.outputs.artifact-id }}"

        # Construct the direct download URL for the HTML report
        # This format directly initiates a download of the artifact's zip file.
        HTML_REPORT_LINK="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${ARTIFACT_ID}"

        # Write the complete summary to the GitHub step summary file
        {
          echo "### Code Coverage Summary"
          echo ""
          echo "$BADGE_MARKDOWN"
          echo ""
          # Link directly to the HTML report artifact's download endpoint
          echo "For a detailed, interactive report, [download the HTML coverage report here](${HTML_REPORT_LINK})."
          echo ""
          echo "<details><summary>Expand for full report</summary>"
          echo ""
          # Embed the detailed Markdown coverage report from the generated file
          if [ -f "$COVERAGE_TEXT_FILE" ]; then
            tail -n +2 "$COVERAGE_TEXT_FILE" | head -n -1
          else
            echo "No detailed coverage report found at $COVERAGE_TEXT_FILE."
          fi
          echo ""
          echo "</details>"
          echo ""
          echo "<details><summary>Expand for full JSON summary</summary>"
          echo ""
          # Print the JSON summary file, indented for readability in Markdown code block
          if [ -f "$COVERAGE_JSON_FILE" ]; then
            jq '.' "$COVERAGE_JSON_FILE" | sed 's/^/    /'
          else
            echo "    No coverage JSON report found."
          fi
          echo ""
          echo "</details>"
        } >> "$GITHUB_STEP_SUMMARY"

